apply plugin: 'java'
apply plugin: 'war'

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.apache.qpid:qpid-client:0.32'
    providedCompile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:1.0.0.Final'
    providedCompile 'org.jboss.spec.javax.jms:jboss-jms-api_2.0_spec:1.0.0.Final'
    compile 'com.github.fernandospr:java-mpns:0.0.3'
}


import groovy.xml.MarkupBuilder

task(hello) << {
    println "Will be generate"

    def mb = new MarkupBuilder(new File("index.html").newPrintWriter())

    mb.html() {
        head() {
            title("This is the title")
        }

        body() {
            div("class": "main") {
                p("this is the body")
            }
        }
    }

}

class MyGradlePlugin implements Plugin<Project> {

    void apply(Project project) {
        project.afterEvaluate {
            println "  Project:" + project.name

            String confName = 'compile'
            Configuration conf = project.configurations[confName]
            println "    Configuration: ${conf.name} < ${conf.extendsFrom}"
            conf = conf.copy() // remove unnesserary dependencies from super configuration

            // http://gradle.org/docs/current/javadoc/org/gradle/api/artifacts/ResolvedConfiguration.html
            // http://gradle.org/docs/current/javadoc/org/gradle/api/artifacts/ResolvedDependency.html
            Set<ResolvedDependency> allDependencies = conf.resolvedConfiguration.firstLevelModuleDependencies

            processDependencies(allDependencies, 0, confName);

            /*for (ResolvedDependency a : allDependencies) {
                Set<ResolvedDependency> childrens = new HashSet<ResolvedDependency>();
                a.children.each { if (it.configuration == confName) childrens.add(it) }

                println "* id=${a.module.id} file=${a.moduleArtifacts.iterator()[0].file}"
                for (ResolvedDependency child : childrens) {
                    println "  * child=${child} ${child.moduleGroup} ${child.configuration}"
                }
            }*/


        }
    }

    void processDependencies(Set<ResolvedDependency> allDependencies, int level, String confName) {
        level++

        for (ResolvedDependency a : allDependencies) {
            makeModule(a, level)

            Set<ResolvedDependency> childrens = new HashSet<ResolvedDependency>();
            a.children.each {
                if (it.configuration == confName) {
                    childrens.add(it)
                }
            }
            processDependencies(childrens, level, confName);
        }

    }

    void makeModule(ResolvedDependency a, int level) {
        println " " + "*"*level + " id=${a.module.id} file=${a.moduleArtifacts.iterator()[0].file}"
    }

}

apply plugin: MyGradlePlugin

task listJars << {
    configurations.runtime.each { File file -> println file.name }
}