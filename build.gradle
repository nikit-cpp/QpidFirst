apply plugin: 'java'
apply plugin: 'war'

buildscript {
    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.apache.qpid:qpid-client:0.32'
    providedCompile 'org.jboss.spec.javax.ejb:jboss-ejb-api_3.2_spec:1.0.0.Final'
    providedCompile 'org.jboss.spec.javax.jms:jboss-jms-api_2.0_spec:1.0.0.Final'
    compile 'com.github.fernandospr:java-mpns:0.0.3'
}


import groovy.xml.MarkupBuilder

/*Создаётся и удаляется папка во время clean, кэп*/
class MyGradlePlugin implements Plugin<Project> {

    File buildDir
    File modules

    void apply(Project project) {

        project.afterEvaluate {
            String confName = 'compile'

            println "Project:" + project.name

            buildDir = project.buildDir
            modules = new File(buildDir, 'modules')

            println "WildFly modules will be stored in '" + modules + "'"
            boolean modulesDirCreated = modules.mkdirs()
            println "modules directory created = ${modulesDirCreated}"
            println "modules directory exist = ${modules.exists()}"

            Configuration conf = project.configurations[confName]
            println "    Configuration: ${conf.name} < ${conf.extendsFrom}"
            conf = conf.copy() // remove unnecessary dependencies from super configuration

            // http://gradle.org/docs/current/javadoc/org/gradle/api/artifacts/ResolvedConfiguration.html
            // http://gradle.org/docs/current/javadoc/org/gradle/api/artifacts/ResolvedDependency.html
            Set<ResolvedDependency> allDependencies = conf.resolvedConfiguration.firstLevelModuleDependencies

            processDependencies(allDependencies, 0, confName);
        }
    }

    void processDependencies(Set<ResolvedDependency> allDependencies, int level, String confName) {
        level++

        for (ResolvedDependency a : allDependencies) {
            makeModule(a, level)

            Set<ResolvedDependency> childrens = new HashSet<ResolvedDependency>();
            a.children.each {
                if (it.configuration == confName) {
                    childrens.add(it)
                }
            }
            processDependencies(childrens, level, confName);
        }

    }

    void makeModule(ResolvedDependency a, int level) {
        File jarSrc = a.moduleArtifacts.iterator()[0].file
        String group = a.module.id.group
        String name = a.module.id.name
        String version = a.module.id.version

        println " " + "*"*level + " id=${a.module.id} file=${jarSrc}"

        File jarFolder = new File(modules, group + File.separator + name + File.separator + version);
        jarFolder.mkdirs()

        File jarDest = new File(jarFolder, jarSrc.name)
        GFileUtils.copyFile(jarSrc, jarDest)


        def mb = new MarkupBuilder(new File(jarFolder, "module.xml").newPrintWriter())

        mb.module("xmlns":"urn:jboss:module:1.3", "name":name, "slot":version) {
            resources() {
                'resource-root'("path": jarDest.name)
            }

            body() {
                div("class": "main") {
                    p("this is the body")
                }
            }
        }
    }

}

apply plugin: MyGradlePlugin

task listJars << {
    configurations.runtime.each { File file -> println file.name }
}